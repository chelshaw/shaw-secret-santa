drop policy "Enable read access for all users" on "public"."matches_2023";

drop policy "Enable insert for self" on "public"."profiles";

drop policy "Enable update for users based on user ID" on "public"."profiles";

create table "public"."answers" (
    "id" bigint generated by default as identity not null,
    "q_key" character varying,
    "answer" character varying,
    "updated_at" timestamp with time zone not null default now(),
    "user_id" uuid
);


alter table "public"."answers" enable row level security;

create table "public"."private" (
    "user_id" uuid not null,
    "email" character varying not null,
    "confirmed" boolean default false
);


alter table "public"."private" enable row level security;

alter table "public"."profiles" drop column "brands";

alter table "public"."profiles" drop column "color";

alter table "public"."profiles" drop column "diet";

alter table "public"."profiles" drop column "genres";

alter table "public"."profiles" drop column "hobbies";

alter table "public"."profiles" drop column "need";

alter table "public"."profiles" drop column "pamper";

alter table "public"."profiles" drop column "style";

CREATE UNIQUE INDEX answers_pkey ON public.answers USING btree (id);

CREATE UNIQUE INDEX private_pkey ON public.private USING btree (user_id);

alter table "public"."answers" add constraint "answers_pkey" PRIMARY KEY using index "answers_pkey";

alter table "public"."private" add constraint "private_pkey" PRIMARY KEY using index "private_pkey";

alter table "public"."answers" add constraint "answers_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."answers" validate constraint "answers_user_id_fkey";

alter table "public"."private" add constraint "private_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."private" validate constraint "private_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.access_key()
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$begin
  return 'foobar';
end;$function$
;

grant delete on table "public"."answers" to "anon";

grant insert on table "public"."answers" to "anon";

grant references on table "public"."answers" to "anon";

grant select on table "public"."answers" to "anon";

grant trigger on table "public"."answers" to "anon";

grant truncate on table "public"."answers" to "anon";

grant update on table "public"."answers" to "anon";

grant delete on table "public"."answers" to "authenticated";

grant insert on table "public"."answers" to "authenticated";

grant references on table "public"."answers" to "authenticated";

grant select on table "public"."answers" to "authenticated";

grant trigger on table "public"."answers" to "authenticated";

grant truncate on table "public"."answers" to "authenticated";

grant update on table "public"."answers" to "authenticated";

grant delete on table "public"."answers" to "service_role";

grant insert on table "public"."answers" to "service_role";

grant references on table "public"."answers" to "service_role";

grant select on table "public"."answers" to "service_role";

grant trigger on table "public"."answers" to "service_role";

grant truncate on table "public"."answers" to "service_role";

grant update on table "public"."answers" to "service_role";

grant delete on table "public"."private" to "anon";

grant insert on table "public"."private" to "anon";

grant references on table "public"."private" to "anon";

grant select on table "public"."private" to "anon";

grant trigger on table "public"."private" to "anon";

grant truncate on table "public"."private" to "anon";

grant update on table "public"."private" to "anon";

grant delete on table "public"."private" to "authenticated";

grant insert on table "public"."private" to "authenticated";

grant references on table "public"."private" to "authenticated";

grant select on table "public"."private" to "authenticated";

grant trigger on table "public"."private" to "authenticated";

grant truncate on table "public"."private" to "authenticated";

grant update on table "public"."private" to "authenticated";

grant delete on table "public"."private" to "service_role";

grant insert on table "public"."private" to "service_role";

grant references on table "public"."private" to "service_role";

grant select on table "public"."private" to "service_role";

grant trigger on table "public"."private" to "service_role";

grant truncate on table "public"."private" to "service_role";

grant update on table "public"."private" to "service_role";

create policy "Authd users can insert with access key"
on "public"."answers"
as permissive
for insert
to authenticated
with check ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'access'::text) = access_key()));


create policy "Authd users can read with access key"
on "public"."answers"
as permissive
for select
to authenticated
using ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'access'::text) = access_key()));


create policy "Authd users can update their own with access key"
on "public"."answers"
as permissive
for update
to authenticated
using ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'access'::text) = access_key()))
with check ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'user_id'::text) = (user_id)::text));


create policy "Enable read access when access key"
on "public"."matches_2023"
as permissive
for select
to authenticated
using ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'access'::text) = access_key()));


create policy "Allow read when access key"
on "public"."private"
as permissive
for select
to authenticated
using (((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'access'::text) = access_key()) AND (((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'userId'::text) = (user_id)::text)));


create policy "Allow update for self when access key"
on "public"."private"
as permissive
for update
to authenticated
using ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'access'::text) = access_key()))
with check ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'userId'::text) = (user_id)::text));


create policy "Enable update for users based on user ID with access key"
on "public"."profiles"
as permissive
for update
to authenticated
using ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'access'::text) = access_key()))
with check ((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'userId'::text) = (user_id)::text));



